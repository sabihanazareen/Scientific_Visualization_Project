// generated by Fast Light User Interface Designer (fluid) version 1.0305

#include "gui.h"

void Gui::cb_readVolumeFile_i(Fl_Menu_*, void*) {
  app->ReadVolumeFile();
}
void Gui::cb_readVolumeFile(Fl_Menu_* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_readVolumeFile_i(o,v);
}

void Gui::cb_xRay_i(Fl_Menu_*, void*) {
  app->XRay();
}
void Gui::cb_xRay(Fl_Menu_* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_xRay_i(o,v);
}

void Gui::cb_MIP_i(Fl_Menu_*, void*) {
  app->MIP();
}
void Gui::cb_MIP(Fl_Menu_* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_MIP_i(o,v);
}


Fl_Menu_Item Gui::menu_menuBar[] = {
 {"Volume Rendering", 0,  0, 0, 64, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Read Volume File", 0,  (Fl_Callback*)Gui::cb_readVolumeFile, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"X-Ray", 0,  (Fl_Callback*)Gui::cb_xRay, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"MIP", 0,  (Fl_Callback*)Gui::cb_MIP, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* Gui::fileMenu = Gui::menu_menuBar + 0;
Fl_Menu_Item* Gui::readFile = Gui::menu_menuBar + 1;
Fl_Menu_Item* Gui::volumeRendering = Gui::menu_menuBar + 13;
Fl_Menu_Item* Gui::readVolumeFile = Gui::menu_menuBar + 14;
Fl_Menu_Item* Gui::XRay = Gui::menu_menuBar + 15;
Fl_Menu_Item* Gui::MIP = Gui::menu_menuBar + 16;


void Gui::cb_sliderX_i(Fl_Value_Slider*, void*) {
  app->VolumeRendering();
}
void Gui::cb_sliderX(Fl_Value_Slider* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_sliderX_i(o,v);
}

void Gui::cb_sliderY_i(Fl_Value_Slider*, void*) {
  app->VolumeRendering();
}
void Gui::cb_sliderY(Fl_Value_Slider* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_sliderY_i(o,v);
}

void Gui::cb_sliderZ_i(Fl_Value_Slider*, void*) {
  app->VolumeRendering();
}
void Gui::cb_sliderZ(Fl_Value_Slider* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_sliderZ_i(o,v);
}

void Gui::cb_sliderWidth_i(Fl_Value_Slider*, void*) {
  app->VolumeRendering();
}
void Gui::cb_sliderWidth(Fl_Value_Slider* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_sliderWidth_i(o,v);
}

void Gui::cb_sliderHeight_i(Fl_Value_Slider*, void*) {
  app->VolumeRendering();
}
void Gui::cb_sliderHeight(Fl_Value_Slider* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_sliderHeight_i(o,v);
}

Gui::Gui() {
  { MainWindow = new Fl_Double_Window(985, 555, "Volume Rendering Scientific Visualization");
    MainWindow->user_data((void*)(this));
    { menuBar = new Fl_Menu_Bar(0, 0, 985, 25, "menuBar");
      menuBar->menu(menu_menuBar);
    } // Fl_Menu_Bar* menuBar
    { EditorWindow = new CEditorWindow(15, 25, 385, 350, "EditorWindow");
      EditorWindow->box(FL_NO_BOX);
      EditorWindow->color(FL_BACKGROUND_COLOR);
      EditorWindow->selection_color(FL_BACKGROUND_COLOR);
      EditorWindow->labeltype(FL_NORMAL_LABEL);
      EditorWindow->labelfont(0);
      EditorWindow->labelsize(14);
      EditorWindow->labelcolor(FL_FOREGROUND_COLOR);
      EditorWindow->align(Fl_Align(FL_ALIGN_CENTER));
      EditorWindow->when(FL_WHEN_RELEASE);
    } // CEditorWindow* EditorWindow
    { DisplayWindow = new CDisplayWindow(415, 25, 570, 530, "DisplayWindow");
      DisplayWindow->box(FL_NO_BOX);
      DisplayWindow->color(FL_BACKGROUND_COLOR);
      DisplayWindow->selection_color(FL_BACKGROUND_COLOR);
      DisplayWindow->labeltype(FL_NORMAL_LABEL);
      DisplayWindow->labelfont(0);
      DisplayWindow->labelsize(14);
      DisplayWindow->labelcolor(FL_FOREGROUND_COLOR);
      DisplayWindow->align(Fl_Align(FL_ALIGN_CENTER));
      DisplayWindow->when(FL_WHEN_RELEASE);
    } // CDisplayWindow* DisplayWindow
    { sliderX = new Fl_Value_Slider(15, 390, 295, 25, "Rotate-X");
      sliderX->type(1);
      sliderX->minimum(-180);
      sliderX->maximum(180);
      sliderX->step(1);
      sliderX->callback((Fl_Callback*)cb_sliderX);
    } // Fl_Value_Slider* sliderX
    { sliderY = new Fl_Value_Slider(15, 445, 295, 25, "Rotate-Y");
      sliderY->type(1);
      sliderY->minimum(-180);
      sliderY->maximum(180);
      sliderY->step(1);
      sliderY->callback((Fl_Callback*)cb_sliderY);
    } // Fl_Value_Slider* sliderY
    { sliderZ = new Fl_Value_Slider(15, 500, 295, 25, "Rotate-Z");
      sliderZ->type(1);
      sliderZ->minimum(-180);
      sliderZ->maximum(180);
      sliderZ->step(1);
      sliderZ->callback((Fl_Callback*)cb_sliderZ);
    } // Fl_Value_Slider* sliderZ
    { sliderWidth = new Fl_Value_Slider(330, 380, 25, 145, "Width");
      sliderWidth->minimum(256);
      sliderWidth->maximum(512);
      sliderWidth->step(1);
      sliderWidth->value(256);
      sliderWidth->callback((Fl_Callback*)cb_sliderWidth);
    } // Fl_Value_Slider* sliderWidth
    { sliderHeight = new Fl_Value_Slider(375, 380, 25, 145, "Height");
      sliderHeight->minimum(256);
      sliderHeight->maximum(512);
      sliderHeight->step(1);
      sliderHeight->value(256);
      sliderHeight->callback((Fl_Callback*)cb_sliderHeight);
    } // Fl_Value_Slider* sliderHeight 
    MainWindow->end();
  } // Fl_Double_Window* MainWindow
  app=new Application();
}

void Gui::show() {
  MainWindow->show();
  EditorWindow->show();
  DisplayWindow->show();
}
